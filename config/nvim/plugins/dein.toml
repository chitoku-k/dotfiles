[[plugins]]
repo = 'justinmk/vim-dirvish'
lua_add = '''
  vim.g.dirvish_mode = [[:sort ,^.*[\/],]]
'''

[[plugins]]
repo = 'base16-community/base16-vim'

[[plugins]]
repo = 'felixjung/vim-base16-lightline'
hook_post_source = '''
  let s:palette = g:lightline#palette()
  let s:palette.inactive.error = s:palette.inactive.left
  let s:palette.inactive.warning = s:palette.inactive.left
  let s:palette.inactive.info = s:palette.inactive.left
  let s:palette.normal.error = [['#c0c5ce', '#bf616a', '07', '01']]
  let s:palette.normal.info = [['#343d46', '#8fa1b3', '18', '04']]
  call lightline#colorscheme()
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
        \   'colorscheme': 'base16_ocean',
        \   'active': {
        \     'left': [ [ 'mode', 'capslock', 'paste' ], [ 'filename', 'modified' ], [ 'coc_error', 'coc_warning', 'coc_info' ], [ 'path', 'anzu' ] ],
        \     'right': [ [ 'filetype' ], [ 'fileformat', 'fileencoding' ], [ 'charcode' ] ],
        \   },
        \   'inactive': {
        \     'left': [ [ 'filename', 'modified' ], [ 'coc_error', 'coc_warning', 'coc_info' ], [ 'path' ] ],
        \     'right': [],
        \   },
        \   'tabline': {
        \     'left': [ [ 'tabs' ] ],
        \     'right': [],
        \   },
        \   'component': {
        \     'path': '%<%{vimrc#lightline#path()}',
        \   },
        \   'component_function': {
        \     'mode': 'vimrc#lightline#mode',
        \     'capslock': 'vimrc#lightline#capslock',
        \     'filename': 'vimrc#lightline#filename',
        \     'modified': 'vimrc#lightline#modified',
        \     'anzu': 'anzu#search_status',
        \     'lineinfo': 'vimrc#lightline#lineinfo',
        \     'fileformat': 'vimrc#lightline#fileformat',
        \     'fileencoding': 'vimrc#lightline#fileencoding',
        \     'filetype': 'vimrc#lightline#filetype',
        \     'charcode': 'vimrc#lightline#charcode',
        \   },
        \   'component_expand': {
        \     'coc_error': 'vimrc#lightline#coc_error',
        \     'coc_warning': 'vimrc#lightline#coc_warning',
        \     'coc_info': 'vimrc#lightline#coc_info',
        \   },
        \   'component_type': {
        \     'coc_error': 'error',
        \     'coc_warning': 'warning',
        \     'coc_info': 'info',
        \   },
        \ }
'''

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
lua_add = '''
  vim.g.better_whitespace_guicolor = '#bf616a'
'''
lua_post_source = '''
  local filetypes_blacklist = vim.g.better_whitespace_filetypes_blacklist
  table.insert(filetypes_blacklist, 'liquid')
  vim.g.better_whitespace_filetypes_blacklist = filetypes_blacklist
'''

[[plugins]]
repo = 't9md/vim-textmanip'
lua_post_source = '''
  vim.keymap.set('x', '<C-h>', '<Plug>(textmanip-move-left)')
  vim.keymap.set('x', '<C-j>', '<Plug>(textmanip-move-down)')
  vim.keymap.set('x', '<C-k>', '<Plug>(textmanip-move-up)')
  vim.keymap.set('x', '<C-l>', '<Plug>(textmanip-move-right)')
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

[[plugins]]
repo = 'lambdalisue/suda.vim'

[[plugins]]
repo = 'tpope/vim-capslock'
lua_post_source = '''
  vim.keymap.set('i', '<C-a>', '<C-o><Plug>CapsLockToggle')
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'rhysd/conflict-marker.vim'
lua_add = '''
  vim.g.conflict_marker_highlight_group = ''
  vim.g.conflict_marker_begin = '^<<<<<<< .*$'
  vim.g.conflict_marker_end = '^>>>>>>> .*$'
'''

[[plugins]]
repo = 'himanoa/goshiteki'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --xdg --completion --key-bindings --no-update-rc'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
lua_add = '''
  vim.g.fzf_statusline = 0
  vim.g.fzf_nvim_statusline = 0
'''
lua_post_source = '''
  vim.keymap.set('n', '<Space>g', function()
    vim.fn['fzf#vim#files'](
      '.',
      vim.fn['fzf#vim#with_preview']({
        options = {
          '--tiebreak=index',
          '--reverse',
        },
      })
    )
  end)
  vim.keymap.set('n', '<Space>f', function()
    vim.fn['fzf#vim#buffers']({
      options = {
        '--reverse',
      },
    })
  end)
  vim.keymap.set('n', '<Space>m', function()
    vim.fn['fzf#vim#marks']({
      options = {
        '--reverse',
      },
    })
  end)
'''

[[plugins]]
repo = 'qpkorr/vim-bufkill'
lua_post_source = '''
  vim.api.nvim_create_user_command(
    'BDU',
    function()
      local dir = vim.fn.expand('%:p:h')
      vim.cmd.BD()
      vim.cmd.edit(dir)
    end,
    {}
  )
  vim.api.nvim_create_user_command(
    'WBD',
    function()
      vim.cmd.write()
      vim.cmd.BD()
    end,
    {}
  )
  vim.api.nvim_create_user_command(
    'WBDU',
    function()
      local dir = vim.fn.expand('%:p:h')
      vim.cmd.WBD()
      vim.cmd.edit(dir)
    end,
    {}
  )
'''

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
lua_add = '''
  vim.g.is_bash = 1
  vim.g.markdown_quote_syntax_on_filetypes = { 'liquid' }
  vim.g.markdown_quote_syntax_filetypes = {
    apache = {
      start = [[apacheconf.*]],
    },
    c = {
      start = [[c.*]],
    },
    css = {
      start = [[css.*]],
    },
    diff = {
      start = [[diff.*]],
    },
    dosini = {
      start = [[ini.*]],
    },
    go = {
      start = [[go.*]],
    },
    graphql = {
      start = [[graphql.*]],
    },
    html = {
      start = [[html.*]],
    },
    make = {
      start = [[makefile.*]],
    },
    nginx = {
      start = [[nginx.*]],
    },
    javascript = {
      start = [[javascript.*]],
    },
    json = {
      start = [[json.*]],
    },
    rust = {
      start = [[rust.*]],
    },
    scss = {
      start = [[scss.*]],
    },
    sh = {
      start = [[\%(bash\|console\|sh\|shell\).*]],
    },
    toml = {
      start = [[toml.*]],
    },
    typescript = {
      start = [[typescript.*]],
    },
    xml = {
      start = [[xaml.*]],
    },
    yaml = {
      start = [[yaml.*]],
    },
  }
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'php', 'javascript', 'typescript', 'css', 'scss']
lua_add = '''
  vim.g.user_emmet_leader_key = '<C-E>'
  vim.g.user_emmet_settings = {
    javascript = {
      extends = 'jsx',
    },
    typescript = {
      extends = 'jsx',
    },
    variables = {
      lang = 'ja',
    },
  }
'''

[[plugins]]
repo = 'RRethy/vim-hexokinase'
if = 'executable("go")'
build = '''
  make hexokinase
'''
lua_add = '''
  vim.g.Hexokinase_virtualText = '⬛︎'
  vim.g.Hexokinase_optOutPatterns = { 'colour_names', 'triple_hex' }
  vim.g.Hexokinase_refreshEvents = { 'BufEnter', 'TextChanged', 'TextChangedI' }
'''

[[plugins]]
repo = 'Shougo/dein.vim'
lua_add = '''
  vim.g['dein#install_github_api_token'] = vim.env.DEIN_INSTALL_GITHUB_API_TOKEN
  vim.api.nvim_create_autocmd('VimEnter', {
    callback = function()
      require('dein').call_hook('post_source')
    end,
  })
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
lua_add = '''
  vim.g.echodoc_enable_at_startup = 1
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
if = 'executable("node")'
lua_add = '''
  vim.g.coc_default_semantic_highlight_groups = 1
  vim.g.coc_global_extensions = {
    'coc-css',
    'coc-java',
    'coc-json',
    'coc-go',
    'coc-phpls',
    'coc-powershell',
    'coc-rust-analyzer',
    'coc-sh',
    'coc-snippets',
    'coc-styled-components',
    'coc-tsserver',
    'coc-vetur',
    'coc-yaml',
  }
'''
lua_post_source = '''
  vim.keymap.set('i', '<C-x><C-n>', function()
    vim.fn['coc#refresh']()
  end)
  vim.keymap.set('n', '<F1>', function()
    vim.fn.CocAction('doHover')
  end)
  vim.keymap.set('n', '<F2>', '<Plug>(coc-rename)')
  vim.keymap.set('n', '<F3>', '<Plug>(coc-implementation)')
  vim.keymap.set('n', '<F4>', '<Plug>(coc-definition)')
  vim.keymap.set('n', '<F5>', '<Plug>(coc-codeaction-cursor)')
  vim.keymap.set('n', '<F6>', function()
    vim.cmd.CocDiagnostics()
  end)
  vim.keymap.set('n', '<F7>', function()
    vim.fn.CocAction('inspectSemanticToken')
  end)

  local coc_id = vim.api.nvim_create_augroup('coc', {})
  vim.api.nvim_create_autocmd('User', {
    group = coc_id,
    pattern = { 'CocDiagnosticChange' },
    callback = function()
      vim.fn['lightline#update']()
    end,
  })
  vim.api.nvim_create_autocmd('User', {
    group = coc_id,
    pattern = { 'CocOpenFloatPrompt' },
    callback = function()
      vim.api.nvim_create_autocmd('InsertLeave', {
        buffer = vim.fn.winbufnr(vim.g.coc_last_float_win),
        callback = function()
          vim.opt.backspace = ''
        end,
      })
      vim.opt.backspace = 'indent,eol,start'
    end,
  })
  vim.api.nvim_create_autocmd('CursorHoldI', {
    group = coc_id,
    callback = function()
      vim.fn.CocActionAsync('highlight')
    end,
  })
'''

[[plugins]]
repo = 'yssl/QFEnter'
lua_add = '''
  vim.g.qfenter_keymap = {
    open = { '<CR>' },
    vopen = { 's' },
    hopen = { 'i' },
    topen = { 't' },
  }
'''

[[plugins]]
repo = 'tpope/vim-speeddating'
lua_post_source = '''
  vim.cmd.SpeedDatingFormat('%Y/%m/%d')
  vim.cmd.SpeedDatingFormat('%Y年%m月%d日')

  vim.keymap.set('n', '<Plug>SpeedDatingFallbackUp', '<Plug>(increment-activator-increment)')
  vim.keymap.set('n', '<Plug>SpeedDatingFallbackDown', '<Plug>(increment-activator-decrement)')
'''

[[plugins]]
repo = 'nishigori/increment-activator'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
lua_add = '''
  vim.g.anzu_status_format = '%/ (%i/%l)'
'''
lua_post_source = '''
  vim.keymap.set('n', '<Esc><Esc>', '<Plug>(anzu-clear-search-status):nohlsearch<CR>')
  vim.keymap.set('n', '*', '<Plug>(asterisk-*)<Plug>(anzu-update-search-status-with-echo)')
  vim.keymap.set('n', '#', '<Plug>(asterisk-#)<Plug>(anzu-update-search-status-with-echo)')

  local anzu_id = vim.api.nvim_create_augroup('anzu', {})
  vim.api.nvim_create_autocmd({ 'WinLeave', 'TabLeave' }, {
    group = anzu_id,
    callback = function()
      vim.fn['anzu#clear_search_status']()
    end,
  })
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'

[[plugins]]
repo = 'raghur/vim-ghost'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
lua_post_source = '''
  vim.keymap.set('n', 'R', '<Plug>(operator-replace)')
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
lua_post_source = '''
  vim.keymap.set('n', 'ys', '<Plug>(operator-surround-append)')
  vim.keymap.set('n', 'ds', '<Plug>(operator-surround-delete)')
  vim.keymap.set('n', 'cs', '<Plug>(operator-surround-replace)')
'''

[[plugins]]
repo = 'kshenoy/vim-signature'

[[plugins]]
repo = 'tyru/operator-camelize.vim'
lua_post_source = '''
  vim.keymap.set('n', 'cl', '<Plug>(operator-camelize-toggle)')
'''

[[plugins]]
repo = 'tyru/caw.vim'
lua_add = '''
  vim.g.caw_operator_keymappings = 1
  vim.g.caw_hatpos_sp = ''
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]
repo = 'sgur/vim-textobj-parameter'

[[plugins]]
repo = 'thinca/vim-textobj-between'
lua_post_source = '''
  vim.keymap.set({ 'o', 'x' }, 'a<Bar>', '<Plug>(textobj-between-a)<Bar>')
  vim.keymap.set({ 'o', 'x' }, 'i<Bar>', '<Plug>(textobj-between-i)<Bar>')
'''

[[plugins]]
repo = 'Julian/vim-textobj-variable-segment'

[[plugins]]
repo = 'inside/vim-textobj-jsxattr'
