vim.opt.background = 'dark'

if vim.env.TERM ~= 'linux' then
  vim.opt.termguicolors = true
end

if not pcall(vim.cmd.colorscheme, 'base16-ocean') then
  vim.cmd.colorscheme('desert')
  return
end

if vim.fn.has('ttyout') == 1 then
  vim.api.nvim_set_hl(0, 'Normal', {})
  vim.api.nvim_set_hl(0, 'NormalNC', {})
end

vim.api.nvim_set_hl(0, 'Comment', { fg = vim.g.base16_gui03, italic = true })
vim.api.nvim_set_hl(0, 'Conceal', { fg = 'Grey' })
vim.api.nvim_set_hl(0, 'ConflictMarkerBegin', { fg = vim.g.base16_gui01, bg = vim.g.base16_gui0B })
vim.api.nvim_set_hl(0, 'ConflictMarkerEnd', { fg = vim.g.base16_gui01, bg = vim.g.base16_gui0D })
vim.api.nvim_set_hl(0, 'ConflictMarkerSeparator', { fg = vim.g.base16_gui01, bg = vim.g.base16_gui0C })
vim.api.nvim_set_hl(0, 'DiffAdd', { bg = '#334539' })
vim.api.nvim_set_hl(0, 'DiffChange', { bg = '#454133' })
vim.api.nvim_set_hl(0, 'DiffDelete', { bg = '#45333a' })
vim.api.nvim_set_hl(0, 'DiffLine', { bg = vim.g.base16_gui0D })
vim.api.nvim_set_hl(0, 'DiffText', { bg = '#5f5d42' })
vim.api.nvim_set_hl(0, 'EndOfBuffer', { fg = vim.g.base16_gui01 })
vim.api.nvim_set_hl(0, 'Extrawhitespace', { bg = vim.g.base16_gui08 })
vim.api.nvim_set_hl(0, 'Error', { fg = vim.g.base16_gui00, bg = vim.g.base16_gui08 })
vim.api.nvim_set_hl(0, 'Flashy', { bg = vim.g.base16_gui01 })
vim.api.nvim_set_hl(0, 'FloatBorder', { link = 'WinSeparator' })
vim.api.nvim_set_hl(0, 'FoldColumn', { fg = vim.g.base16_gui0C, bg = vim.g.base16_gui01 })
vim.api.nvim_set_hl(0, 'Identifier', { fg = vim.g.base16_gui05 })
vim.api.nvim_set_hl(0, 'LineNr', { fg = vim.g.base16_gui03, bg = vim.g.base16_gui01 })
vim.api.nvim_set_hl(0, 'NormalFloat', { link = 'Pmenu' })
vim.api.nvim_set_hl(0, 'SignatureMarkerText', { fg = vim.g.base16_gui08, bg = vim.g.base16_gui01 })
vim.api.nvim_set_hl(0, 'SignatureMarkText', { fg = vim.g.base16_gui0B, bg = vim.g.base16_gui01 })
vim.api.nvim_set_hl(0, 'SignColumn', { fg = vim.g.base16_gui03, bg = vim.g.base16_gui01 })
vim.api.nvim_set_hl(0, 'SpellBad', { fg = vim.g.base16_gui08, sp = vim.g.base16_gui08, undercurl = true })
vim.api.nvim_set_hl(0, 'StatusLine', { fg = vim.g.base16_gui04, bg = vim.g.base16_gui02 })
vim.api.nvim_set_hl(0, 'StatusLineNC', { fg = vim.g.base16_gui03, bg = vim.g.base16_gui01 })
vim.api.nvim_set_hl(0, 'TermCursor', { reverse = true })
vim.api.nvim_set_hl(0, 'TermCursorNC', {})
vim.api.nvim_set_hl(0, 'VertSplit', { fg = vim.g.base16_gui02, bg = vim.g.base16_gui02 })
vim.api.nvim_set_hl(0, 'WinBar', { bold = true })
vim.api.nvim_set_hl(0, 'WinBarNC', { link = 'WinBar' })

vim.api.nvim_set_hl(0, 'dockerfileFrom', { link = 'Tag' })
vim.api.nvim_set_hl(0, 'goGenerate', { link = 'Special' })
vim.api.nvim_set_hl(0, 'goGenerateVariables', { link = 'PreProc' })
vim.api.nvim_set_hl(0, 'goLabel', { link = 'Keyword' })
vim.api.nvim_set_hl(0, 'goRepeat', { link = 'Keyword' })
vim.api.nvim_set_hl(0, 'goType', { link = 'Keyword' })
vim.api.nvim_set_hl(0, 'helpHyperTextJump', { link = 'Underlined' })
vim.api.nvim_set_hl(0, 'javaScriptComment', { link = 'Comment' })
vim.api.nvim_set_hl(0, 'phpIdentifier', { link = 'Character' })
vim.api.nvim_set_hl(0, 'phpMemberSelector', { link = 'NONE' })
vim.api.nvim_set_hl(0, 'phpMethodsVar', { link = 'Function' })
vim.api.nvim_set_hl(0, 'phpParent', { link = 'NONE' })
vim.api.nvim_set_hl(0, 'phpRepeat', { link = 'Keyword' })
vim.api.nvim_set_hl(0, 'purescriptOperator', { link = 'Delimiter' })
vim.api.nvim_set_hl(0, 'qfError', { fg = vim.g.base16_gui08 })
vim.api.nvim_set_hl(0, 'sshconfigEnum', { link = 'Boolean' })
vim.api.nvim_set_hl(0, 'tomlKey', { link = 'Macro' })
vim.api.nvim_set_hl(0, 'typescriptEndColons', { link = 'jsObjectSeparator' })
vim.api.nvim_set_hl(0, 'typescriptIdentifier', { link = 'Constant' })
vim.api.nvim_set_hl(0, 'typescriptOperator', { link = 'Function' })
vim.api.nvim_set_hl(0, 'typescriptOpSymbols', { link = 'Function' })
vim.api.nvim_set_hl(0, 'typescriptReserved', { link = 'Keyword' })
vim.api.nvim_set_hl(0, 'yamlBlockMappingKey', { link = 'Macro' })
vim.api.nvim_set_hl(0, 'yamlFlowMappingKey', { link = 'Macro' })
vim.api.nvim_set_hl(0, 'yamlPlainScalar', { link = 'String' })

vim.api.nvim_set_hl(0, '@lsp.type.boolean', { link = 'Boolean' })
vim.api.nvim_set_hl(0, '@lsp.type.decorator', { link = 'PreProc' })
vim.api.nvim_set_hl(0, '@lsp.type.enum', { link = 'Type' })
vim.api.nvim_set_hl(0, '@lsp.type.keyword', { link = 'Keyword' })
vim.api.nvim_set_hl(0, '@lsp.type.keyword.go', {})
vim.api.nvim_set_hl(0, '@lsp.type.namespace', { italic = true })
vim.api.nvim_set_hl(0, '@lsp.type.number', { link = 'Number' })
vim.api.nvim_set_hl(0, '@lsp.type.selfTypeKeyword', { link = 'Special' })
vim.api.nvim_set_hl(0, '@lsp.type.string', { link = 'String' })
vim.api.nvim_set_hl(0, '@lsp.type.string.go', {})
vim.api.nvim_set_hl(0, '@lsp.type.typeAlias', { link = 'Special' })
vim.api.nvim_set_hl(0, '@lsp.typemod.variable.constant', { link = 'Boolean' })
vim.api.nvim_set_hl(0, '@lsp.typemod.variable.readonly', { link = 'Boolean' })

vim.api.nvim_set_hl(0, 'DiagnosticError', { fg = vim.g.base16_gui08 })
vim.api.nvim_set_hl(0, 'DiagnosticHint', { fg = vim.g.base16_gui0C })
vim.api.nvim_set_hl(0, 'DiagnosticInfo', { fg = vim.g.base16_gui0D })
vim.api.nvim_set_hl(0, 'DiagnosticWarn', { fg = vim.g.base16_gui0A })

vim.api.nvim_set_hl(0, 'DiagnosticSignError', { fg = vim.g.base16_gui05, bg = vim.g.base16_gui08 })
vim.api.nvim_set_hl(0, 'DiagnosticSignHint', { fg = vim.g.base16_gui01, bg = vim.g.base16_gui0C })
vim.api.nvim_set_hl(0, 'DiagnosticSignInfo', { fg = vim.g.base16_gui01, bg = vim.g.base16_gui0D })
vim.api.nvim_set_hl(0, 'DiagnosticSignWarn', { fg = vim.g.base16_gui08, bg = vim.g.base16_gui0A })

vim.api.nvim_set_hl(0, 'DiagnosticUnderlineError', { sp = vim.g.base16_gui08, undercurl = true })
vim.api.nvim_set_hl(0, 'DiagnosticUnderlineHint', { sp = vim.g.base16_gui0C, undercurl = true })
vim.api.nvim_set_hl(0, 'DiagnosticUnderlineInfo', { sp = vim.g.base16_gui0D, undercurl = true })
vim.api.nvim_set_hl(0, 'DiagnosticUnderlineWarn', { sp = vim.g.base16_gui0A, undercurl = true })

vim.api.nvim_set_hl(0, 'LspReferenceRead', { bg = vim.g.base16_gui02 })
vim.api.nvim_set_hl(0, 'LspReferenceText', { bg = vim.g.base16_gui02 })
vim.api.nvim_set_hl(0, 'LspReferenceWrite', { bg = vim.g.base16_gui02 })
