[[plugins]]
repo = 'justinmk/vim-dirvish'
hook_add = '''
  let g:dirvish_mode = ':sort ,^.*[\/],'
  nnoremap <silent> <Space>e :Dirvish<CR>
  nnoremap <silent> <Space>r :Dirvish %:h<CR>
'''

[[plugins]]
repo = 'base16-community/base16-vim'
hook_add = '''
  let g:base16colorspace = 256
'''

[[plugins]]
repo = 'felixjung/vim-base16-lightline'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
        \   'colorscheme': 'base16_ocean',
        \   'active': {
        \     'left': [ [ 'mode', 'capslock', 'paste' ], [ 'filename', 'modified' ], [ 'coc_error', 'coc_warning', 'coc_info' ], [ 'path', 'anzu' ] ],
        \     'right': [ [ 'lineinfo' ], [ 'fileformat', 'fileencoding', 'filetype' ], [ 'charcode' ] ],
        \   },
        \   'inactive': {
        \     'left': [ [ 'filename', 'modified', 'path' ] ],
        \     'right': [],
        \   },
        \   'tabline': {
        \     'left': [ [ 'tabs' ] ],
        \     'right': [],
        \   },
        \   'component': {
        \     'path': '%<%{&filetype ==# "fzf" ? "" : expand("%:p:~:h")}',
        \   },
        \   'component_function': {
        \     'mode': 'vimrc#lightline#mode',
        \     'capslock': 'vimrc#lightline#capslock',
        \     'filename': 'vimrc#lightline#filename',
        \     'modified': 'vimrc#lightline#modified',
        \     'anzu': 'anzu#search_status',
        \     'lineinfo': 'vimrc#lightline#lineinfo',
        \     'fileformat': 'vimrc#lightline#fileformat',
        \     'fileencoding': 'vimrc#lightline#fileencoding',
        \     'filetype': 'vimrc#lightline#filetype',
        \     'charcode': 'vimrc#lightline#charcode',
        \   },
        \   'component_expand': {
        \     'coc_error': 'vimrc#lightline#coc_error',
        \     'coc_warning': 'vimrc#lightline#coc_warning',
        \     'coc_info': 'vimrc#lightline#coc_info',
        \   },
        \   'component_type': {
        \     'coc_error': 'error',
        \     'coc_warning': 'warning',
        \     'coc_info': 'info',
        \   },
        \ }

  let s:palette = g:lightline#colorscheme#base16_ocean#palette
  let s:palette.normal.error = [['#c0c5ce', '#bf616a', '07', '01']]
  let s:palette.normal.info = [['#343d46', '#8fa1b3', '18', '04']]
'''

# Either $TERM_PROGRAM or $VTE_VERSION is used for detection
[[plugins]]
repo = 'jszakmeister/vim-togglecursor'
if = '!has("nvim")'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
  let g:extra_whitespace_ignored_filetypes = [
        \   'markdown',
        \ ]
'''

[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = '''
  xmap <C-h> <Plug>(textmanip-move-left)
  xmap <C-j> <Plug>(textmanip-move-down)
  xmap <C-k> <Plug>(textmanip-move-up)
  xmap <C-l> <Plug>(textmanip-move-right)
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'lambdalisue/suda.vim'

[[plugins]]
repo = 'tpope/vim-capslock'
hook_add = '''
  imap <C-a> <C-o><Plug>CapsLockToggle
'''

[[plugins]]
repo = 'kana/vim-tabpagecd'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --xdg --no-update-rc'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
  let g:fzf_statusline = 0
  let g:fzf_nvim_statusline = 0
  nnoremap <silent> <Space>g :call
          \ fzf#vim#files(
          \   '.',
          \   fzf#vim#with_preview({
          \     'options': [
          \       '--tiebreak=index',
          \       '--reverse',
          \     ],
          \   })
          \ )<CR>
  nnoremap <silent> <Space>f :call
          \ fzf#vim#buffers({
          \   'options': [
          \     '--reverse',
          \   ],
          \ })<CR>
  nnoremap <silent> <Space>m :call
          \ fzf#vim#marks({
          \   'options': [
          \     '--reverse',
          \   ],
          \ })<CR>
'''

[[plugins]]
repo = 'qpkorr/vim-bufkill'
hook_add = '''
  command! WBD write | BD
'''

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
hook_add = '''
  let g:is_bash = 1
  let g:markdown_quote_syntax_filetypes = {
        \   'css': {
        \     'start': 'css',
        \   },
        \   'go': {
        \     'start': 'go',
        \   },
        \   'html': {
        \     'start': 'html',
        \   },
        \   'javascript': {
        \     'start': 'javascript',
        \   },
        \   'scss': {
        \     'start': 'scss',
        \   },
        \   'sh': {
        \     'start': 'sh',
        \   },
        \   'typescript': {
        \     'start': 'typescript',
        \   },
        \ }
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'php', 'javascript', 'typescript', 'css', 'scss']
hook_add = '''
  let g:user_emmet_leader_key = '<C-E>'
  let g:user_emmet_settings = {
        \   'javascript': {
        \     'extends': 'jsx',
        \   },
        \   'typescript': {
        \     'extends': 'jsx',
        \   },
        \   'variables': {
        \     'lang': 'ja',
        \   },
        \ }
'''

[[plugins]]
repo = 'RRethy/vim-hexokinase'
if = 'has("nvim-0.3.0") && executable("go")'
build = '''
  make hexokinase
'''
hook_add = '''
  let g:Hexokinase_virtualText = '⬛︎'
  let g:Hexokinase_ftAutoload = ['*']
  let g:Hexokinase_optOutPatterns = ['colour_names']
  let g:Hexokinase_refreshEvents = ['BufEnter', 'TextChanged', 'TextChangedI']

  if !has('nvim-0.3.2')
    let g:Hexokinase_highlighters = ['sign_column']
  endif
'''

[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#install_github_api_token = expand('$DEIN_INSTALL_GITHUB_API_TOKEN')
  autocmd VimEnter * call dein#call_hook('post_source')
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
  let g:echodoc_enable_at_startup = 1
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
if = '(has("nvim-0.3.1") || v:version >= 800) && executable("node")'
hook_add = '''
  let g:coc_global_extensions = [
        \   'coc-css',
        \   'coc-java',
        \   'coc-json',
        \   'coc-go',
        \   'coc-phpls',
        \   'coc-sh',
        \   'coc-snippets',
        \   'coc-styled-components',
        \   'coc-tsserver',
        \   'coc-vetur',
        \ ]

  inoremap <silent><expr> <C-x><C-n> coc#refresh()
  nnoremap <silent> <F1> :call CocAction('doHover') \| call coc#util#float_jump()<CR>
  nmap <silent> <F2> <Plug>(coc-rename)
  nmap <silent> <F3> <Plug>(coc-implementation)
  nmap <silent> <F4> <Plug>(coc-definition)
  nmap <silent> <F5> <Plug>(coc-format)
  vmap <silent> <F5> <Plug>(coc-format-selected)
  nnoremap <silent> <F6> :CocDiagnostics<CR>

  augroup coc
    autocmd!
    autocmd User CocDiagnosticChange call lightline#update()
    autocmd CursorHoldI * silent call CocActionAsync('highlight') | call CocActionAsync('doHover')
  augroup END
'''

[[plugins]]
repo = 'yssl/QFEnter'
hook_add = '''
  let g:qfenter_keymap = {
        \   'open': ['<CR>'],
        \   'vopen': ['s'],
        \   'hopen': ['i'],
        \   'topen': ['t'],
        \ }
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
hook_add = '''
  let g:incsearch#magic = '\v'
  map / <Plug>(incsearch-forward)
  map ? <Plug>(incsearch-backward)
'''
if = '!has("patch-8.0.1238")'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  let g:anzu_status_format = "%/ (%i/%l)"
  nmap <silent> <Esc><Esc> <Plug>(anzu-clear-search-status):nohlsearch<CR>
  nmap * <Plug>(asterisk-*)<Plug>(anzu-update-search-status-with-echo)
  nmap # <Plug>(asterisk-#)<Plug>(anzu-update-search-status-with-echo)

  augroup anzu
    autocmd!
    autocmd WinLeave,TabLeave * call anzu#clear_search_status()
  augroup END
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'

[[plugins]]
repo = 'kana/vim-fakeclip'
if = '!has("nvim")'

[[plugins]]
repo = 'raghur/vim-ghost'
if = 'has("nvim")'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add = '''
  nmap R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
hook_add = '''
  nmap <silent>ys <Plug>(operator-surround-append)
  nmap <silent>ds <Plug>(operator-surround-delete)
  nmap <silent>cs <Plug>(operator-surround-replace)
'''

[[plugins]]
repo = 'haya14busa/vim-operator-flashy'
hook_add = '''
  map y <Plug>(operator-flashy)
  nmap Y <Plug>(operator-flashy)$
'''

[[plugins]]
repo = 'kshenoy/vim-signature'

[[plugins]]
repo = 'tyru/operator-reverse.vim'
hook_add = '''
  nmap <silent>vs <Plug>(operator-reverse-text)
'''

[[plugins]]
repo = 'tyru/operator-camelize.vim'
hook_add = '''
  nmap <silent>cl <Plug>(operator-camelize-toggle)
'''

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  let g:caw_operator_keymappings = 1
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'rhysd/vim-textobj-anyblock'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]
repo = 'sgur/vim-textobj-parameter'

[[plugins]]
repo = 'Julian/vim-textobj-variable-segment'

[[plugins]]
repo = 'inside/vim-textobj-jsxattr'
