#!/usr/bin/env bash

dotfiles-packages() {
    if [[ ! -t 0 ]]; then
        return
    fi

    local packages=$1
    local descriptions=$2

    paste -d '\n' \
        <(awk \
            -v bold="$(tput bold)" \
            -v green="$(tput setaf 2)" \
            -v purple="$(tput setaf 5)" \
            -v sgr0="$(tput sgr0)" '
            {
                gsub(/\//, sgr0 "/")
                print purple NR " " green bold $0
            }
        ' < "$packages") \
        <(awk '
            {
                print "    " $0
            }
        ' < "$descriptions")
}

dotfiles-read-install() {
    local input
    local packages="$(cat -- "$1")"
    shift

    if [[ -t 0 ]]; then
        tput setaf 2
        tput bold
        echo '==> Packages to install (eg: 1 2 3 or 1-3)'
        echo -n '==> '
        tput sgr0
    fi >&2

    read -r input

    if [[ -t 0 ]]; then
        echo >&2
    fi

    awk \
        -v input="$input" '
        BEGIN {
            n = split(input, targets, " ")
        }
        {
            for (i = 1; i <= n; ++i) {
                start = end = targets[i]
                sub(/-.*/, "", start)
                sub(/.*-/, "", end)

                for (j = int(start); j <= int(end); ++j) {
                    if (j == NR) {
                        print $0
                    }
                }
            }
        }
    ' <<< "$packages"
}

dotfiles-list-install() {
    local list="$(cat -)"
    local count="$(wc -l <<< "$list" | xargs)"

    {
        tput bold
        echo -n "Packages ($count) "
        tput sgr0

        awk \
            -v ORS='  ' '
            {
                sub(/[^\/]*\//, "")
                print
            }
        ' <<< "$list"
        echo
    } >&2
}

dotfiles-confirm-install() {
    if [[ ! -t 0 ]]; then
        return
    fi

    local confirm

    {
        echo
        tput bold
        tput setaf 4
        echo -n ':: '
        tput sgr0

        tput bold
        echo -n 'Proceed with installation? [Y/n] '
        tput sgr0
    } >&2

    read -r confirm
    case "$confirm" in
        [yY]*|'')
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

dotfiles-download() {
    local repository='https://github.com/chitoku-k/dotfiles'
    local tarball='https://github.com/chitoku-k/dotfiles/archive/master.tar.gz'

    if type git &> /dev/null; then
        git clone "$repository"
    elif type curl &> /dev/null; then
        curl -sSL "$tarball" | tar xz -m
        mv 'dotfiles-master' 'dotfiles'
    fi
}

dotfiles-install() {
    # List packages
    dotfiles-packages ./packages/list ./packages/descriptions

    # Read packages to install
    local installing="$(dotfiles-read-install ./packages/list)"
    [[ -z "$installing" ]] && return 1

    dotfiles-list-install <<< "$installing"

    # Install
    dotfiles-confirm-install && ./installer/install-package <<< "$installing"
}

dotfiles-reload() {
    if ! type zsh &> /dev/null || [[ ! -t 0 ]]; then
        return
    fi

    local insecure=($(zsh -c 'autoload -Uz compinit && compinit -i && compaudit'))

    local dir
    for dir in "${insecure[@]}"; do
        chmod 755 -- "$dir"
    done
}

if [[ ! -d 'config' ]] || [[ ! -a 'packages/list' ]] || [[ ! -a 'packages/descriptions' ]]; then
    (dotfiles-download && cd 'dotfiles' && dotfiles-install "$@") && dotfiles-reload
else
    dotfiles-install "$@" && dotfiles-reload
fi
